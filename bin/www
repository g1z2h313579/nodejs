#!/usr/bin/env node
const socket = require("socket.io");
const comconfig = require("../routes/database/comconfig")
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodeproject:server');
var fs = require("fs")
// var http = require('http');

var http,server,port;
if(comconfig.local.open){
  http = require("http");
  port = comconfig.local.port;
  server = http.createServer(app);
  //socket监听http实例
  
}else if(comconfig.http.open){
  http = require("http");
  port = comconfig.http.port;
  server = http.createServer(app);
  //socket监听http实例
  
}else if(comconfig.https.open){
  http = require("http");
  port = comconfig.https.port;
  var options = {
    key : fs.readFileSync(""),
    cert : fs.readFileSync("")
  },
  server = http.createServer(options,app)
}


/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || "3000");
app.set('port', port);

/**
 * Create HTTP server.
 */
var io = socket.listen(server);
  module.exports = io;



//http实例
// var server = http.createServer(app);




/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
